[
  {
    "id": 1,
    "title": "Introduction to Database Concepts",
    "image": "https://assets.toptal.io/images?url=https%3A%2F%2Fbs-uploads.toptal.io%2Fblackfish-uploads%2Fcomponents%2Fblog_post_page%2F4084683%2Fcover_image%2Fregular_1708x683%2F0712-Bad_Practices_in_Database_Design_-_Are_You_Making_These_Mistakes_Dan_Newsletter-549c07a55cc276f4204263b6e6bef737.png",
    "content": "What is DATA?\nData refers to raw facts and figures that have no context or meaning by themselves. It could be numbers, text, images, audio, etc.\nExample:\n101, 'John', 'A+', 90\n\nProperties or Attributes\nAttributes are characteristics or properties that describe an entity.\nExample:\nFor a student entity:\n- Roll No (Integer)\n- Name (String)\n- Grade (Character)\n- Marks (Integer)\n\nDATABASE\nA Database is an organized collection of structured information or data, typically stored electronically in a computer system.\nExample:\nA student database containing records like Roll No, Name, Age, Grade.\n\nDATABASE MANAGEMENT SYSTEM (DBMS)\nA DBMS is software used to store, retrieve, and manage data in databases. It provides an interface for users to perform operations like insert, update, delete, and query.\nExample:\nMySQL, Oracle, MS Access\n\nRELATIONAL DATABASE MANAGEMENT SYSTEM (RDBMS)\nAn RDBMS is a type of DBMS that stores data in the form of related tables. It uses Structured Query Language (SQL) for database access.\nExample:\nMySQL, PostgreSQL, SQL Server, Oracle\n\nRELATIONAL MODEL\nThe Relational Model represents data as a collection of relations (tables). Each table has rows (tuples) and columns (attributes). It ensures data integrity, avoids redundancy, and maintains relationships using keys.\n\nRULES OF E.F. CODD\n1. Information Rule: All data should be stored in table format.\n   Example: Student(Name, Age, Grade)\n\n2. Guaranteed Access Rule: Each data element should be accessible via table name, column name, and primary key.\n   Example: SELECT Name FROM Student WHERE ID = 101;\n\n3. Systematic Treatment of NULLs: NULLs must be uniformly treated as missing or inapplicable data.\n   Example: A missing phone number in a record is stored as NULL.\n\n4. Dynamic Online Catalog: Metadata (data about data) should be stored in the same format as regular data.\n   Example: System tables like INFORMATION_SCHEMA.TABLES in SQL Server\n\n5. Comprehensive Data Sub-language Rule: The system must support at least one language (like SQL) that can define, manipulate, and control data.\n   Example: SQL as the comprehensive language.\n\n6. View Updating Rule: All views that are theoretically updatable should be updatable by the system.\n   Example: CREATE VIEW HighScorers AS SELECT Name FROM Student WHERE Marks > 90;\n\n7. High-level Insert, Update, Delete: Operations must be supported for sets of rows.\n   Example: UPDATE Student SET Grade = 'A+' WHERE Marks > 90;\n\n8. Physical Data Independence: Changes in physical storage should not affect how users access data.\n\n9. Logical Data Independence: Changes in logical structure should not affect application programs.\n\n10. Integrity Independence: Integrity constraints must be stored separately and modifiable without affecting applications.\n   Example: Setting a constraint like Marks < 100\n\n11. Distribution Independence: Users should not need to know whether the database is distributed.\n\n12. Non-subversion Rule: Low-level access should not be able to bypass security and integrity rules.",
    "sqlQuery": "SELECT * FROM Student;",
    "queryResult": "Displays all rows and columns from the Student table.",
    "queryExplanation": "This SQL query retrieves all records from the Student table, showing complete information stored in each row."
  },
  {
  "id": 2,
  "title": "Datatypes in SQL",
  "image": "https://i.postimg.cc/3Nb7RY7m/hierarchy.png",
  "content": "SQL data types define the kind of data that can be stored in a table column. Choosing the right data type is crucial for data integrity, storage efficiency, and query performance. Common categories include numeric types (INT, DECIMAL), string types (VARCHAR, TEXT), date/time types (DATE, TIMESTAMP), boolean types (BOOLEAN), and specialized types (JSON, UUID). Each database system has its own variations and implementations of these data types.",
  "sqlQuery": "CREATE TABLE employees (\n  employee_id INT PRIMARY KEY,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  birth_date DATE,\n  hire_date TIMESTAMP,\n  salary DECIMAL(10,2),\n  is_active BOOLEAN DEFAULT TRUE,\n  department_id INT,\n  skills JSON\n);",
  "queryResult": "Query executed successfully. Table 'employees' created with the following columns:\n- employee_id (INT, Primary Key)\n- first_name (VARCHAR(50), Not Null)\n- last_name (VARCHAR(50), Not Null)\n- birth_date (DATE)\n- hire_date (TIMESTAMP)\n- salary (DECIMAL(10,2))\n- is_active (BOOLEAN, Default: TRUE)\n- department_id (INT)\n- skills (JSON)",
  "queryExplanation": "This CREATE TABLE statement demonstrates various SQL data types:\n1. INT: Used for employee_id and department_id to store whole numbers\n2. VARCHAR(50): Used for first_name and last_name to store variable-length strings up to 50 characters\n3. DATE: Used for birth_date to store date values (YYYY-MM-DD)\n4. TIMESTAMP: Used for hire_date to store date and time values\n5. DECIMAL(10,2): Used for salary to store fixed-point numbers with 10 total digits and 2 decimal places\n6. BOOLEAN: Used for is_active to store true/false values with a default of TRUE\n7. JSON: Used for skills to store flexible JSON data\n\nChoosing appropriate data types ensures data integrity and optimizes storage and performance."
},
  {
    "id": 3,
    "title": "Filtering Data with WHERE",
    "image": "https://i.imgur.com/jH6a2o1.png",
    "content": "The `WHERE` clause is essential for filtering records...",
    "sqlQuery": "SELECT * FROM Artists WHERE Genre = 'Rock';",
    "queryResult": "ArtistID | Name           | Genre\n---------|----------------|------\n1        | Led Zeppelin   | Rock",
    "queryExplanation": "This query selects all columns (`*`) from the 'Artists' table, but only for the rows where the 'Genre' column is 'Rock'."
  },
  {
    "id": 4,
    "title": "Sorting Results with ORDER BY",
    "image": "https://i.imgur.com/9s0lK3v.png",
    "content": "The `ORDER BY` clause sorts the result set...",
    "sqlQuery": "SELECT Name, Genre FROM Artists ORDER BY Name DESC;",
    "queryResult": "Name              | Genre\n------------------|--------\nMichael Jackson   | Pop\nMiles Davis       | Jazz\nLed Zeppelin      | Rock",
    "queryExplanation": "This query retrieves the 'Name' and 'Genre' for all artists and sorts the results by the 'Name' column in descending order."
  },
  {
    "id": 5,
    "title": "Working with NULL Values",
    "image": "https://i.imgur.com/d5b9Y7W.png",
    "content": "A `NULL` value in a database field means 'no value'...",
    "sqlQuery": "SELECT Name FROM Artists WHERE Genre IS NULL;",
    "queryResult": "Name\n--------\nBeethoven",
    "queryExplanation": "This query finds the names of any artists in the table for whom the 'Genre' field has been left empty (NULL)."
  },
  {
    "id": 6,
    "title": "Using Aggregate Functions",
    "image": "https://i.imgur.com/r3jK4gA.png",
    "content": "Aggregate functions perform a calculation on a set of rows and return a single, summary value...",
    "sqlQuery": "SELECT COUNT(*) FROM Artists;",
    "queryResult": "COUNT(*)\n----------\n4",
    "queryExplanation": "This query uses the `COUNT(*)` function to count the total number of rows in the 'Artists' table..."
  }
]
