[
  {
    "id": 1,
    "title": "Introduction to SQL",
    "content": "SQL (Structured Query Language) is the standard for managing data in relational databases. It allows you to query, insert, update, and delete data. Databases store information in tables made of columns (attributes) and rows (records).",
    "sqlQuery": "/* This is a comment. SQL comments start with two dashes or are enclosed in /* ... */. There's no query to run for an introduction. */\n-- Let's imagine we have a table called 'Artists'.",
    "queryResult": "No result to display.",
    "queryExplanation": "This is just a comment to illustrate what they look like in SQL. Comments are ignored by the database engine and are used for documentation."
  },
  {
    "id": 2,
    "title": "The SELECT Statement",
    "content": "The `SELECT` statement is used to retrieve data from a database. You specify the columns you want and the table to get them from using the `FROM` clause. Use `*` to select all columns.",
    "sqlQuery": "SELECT Name, Genre FROM Artists;",
    "queryResult": "Name              | Genre\n------------------|--------\nLed Zeppelin      | Rock\nMichael Jackson   | Pop\nMiles Davis       | Jazz",
    "queryExplanation": "This query selects the 'Name' and 'Genre' columns from the 'Artists' table, returning a result set with just those two columns for all artists."
  },
  {
    "id": 3,
    "title": "Filtering Data with WHERE",
    "content": "The `WHERE` clause is essential for filtering records to retrieve only the rows that meet a specific condition. It follows the `FROM` clause and uses comparison operators like `=`, `>`, `<`, etc.",
    "sqlQuery": "SELECT * FROM Artists WHERE Genre = 'Rock';",
    "queryResult": "ArtistID | Name           | Genre\n---------|----------------|------\n1        | Led Zeppelin   | Rock",
    "queryExplanation": "This query selects all columns (`*`) from the 'Artists' table, but only for the rows where the 'Genre' column is exactly equal to 'Rock'."
  },
  {
    "id": 4,
    "title": "Sorting Results with ORDER BY",
    "content": "The `ORDER BY` clause sorts the result set. The default order is ascending (`ASC`). To sort in the reverse order, use the `DESC` keyword.",
    "sqlQuery": "SELECT Name, Genre FROM Artists ORDER BY Name DESC;",
    "queryResult": "Name              | Genre\n------------------|--------\nMichael Jackson   | Pop\nMiles Davis       | Jazz\nLed Zeppelin      | Rock",
    "queryExplanation": "This query retrieves the 'Name' and 'Genre' for all artists and sorts the results by the 'Name' column in descending (Z-A) order."
  },
  {
    "id": 5,
    "title": "Working with NULL Values",
    "content": "A `NULL` value in a database field means 'no value'. It is different from zero or an empty string. To filter for these empty fields, you must use `IS NULL` or `IS NOT NULL`.",
    "sqlQuery": "SELECT Name FROM Artists WHERE Genre IS NULL;",
    "queryResult": "Name\n--------\nBeethoven",
    "queryExplanation": "This query finds the names of any artists in the table for whom the 'Genre' field has been left empty (NULL)."
  },
  {
    "id": 6,
    "title": "Using Aggregate Functions",
    "content": "Aggregate functions perform a calculation on a set of rows and return a single, summary value. Common functions are `COUNT()`, `SUM()`, `AVG()`, `MIN()`, and `MAX()`.",
    "sqlQuery": "SELECT COUNT(*) FROM Artists;",
    "queryResult": "COUNT(*)\n----------\n4",
    "queryExplanation": "This query uses the `COUNT(*)` function to count the total number of rows in the 'Artists' table and returns that single number."
  }
]
