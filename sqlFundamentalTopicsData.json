[
  {
    "id": 1,
    "title": "Introduction to Database Concepts",
    "image": "https://assets.toptal.io/images?url=https%3A%2F%2Fbs-uploads.toptal.io%2Fblackfish-uploads%2Fcomponents%2Fblog_post_page%2F4084683%2Fcover_image%2Fregular_1708x683%2F0712-Bad_Practices_in_Database_Design_-_Are_You_Making_These_Mistakes_Dan_Newsletter-549c07a55cc276f4204263b6e6bef737.png",
    "content": "What is DATA?\nData refers to raw facts and figures without context. Example: 101, 'John', 'A+', 90.\n\nWhat are Attributes?\nAttributes are properties describing an entity. For a student, this would be Roll No, Name, Grade, and Marks.\n\nDATABASE:\nA Database is an organized, structured collection of data stored electronically. Example: A student database.\n\nDATABASE MANAGEMENT SYSTEM (DBMS):\nA DBMS is software for storing, retrieving, and managing data in a database. Examples include MySQL, Oracle, and MS Access.\n\nRELATIONAL DBMS (RDBMS):\nAn RDBMS is a DBMS that stores data in related tables and uses SQL for access. Examples include MySQL, PostgreSQL, and SQL Server.",
    "syntax": "Basic SQL Command Structure:\nCOMMAND [options] FROM table_name WHERE [condition];",
    "sqlQuery": "SELECT * FROM Student;",
    "queryResult": "Displays all rows and columns from the Student table.",
    "queryExplanation": "This SQL query retrieves all records from the Student table, showing complete information stored in each row."
  },
  {
    "id": 2,
    "title": "SQL Data Types",
    "image": "https://i.postimg.cc/3Nb7RY7m/hierarchy.png",
    "content": "SQL Data Types define the kind of value that can be stored in a table's column. Choosing the correct data type is crucial for data integrity and performance.\n\nCommon Categories:\n\n1. Numeric Data Types:\n- `INT` or `INTEGER`: For whole numbers.\n- `DECIMAL(p,s)`: For exact numbers. Ideal for currency.\n- `FLOAT`, `REAL`: For approximate floating-point numbers.\n\n2. String Data Types:\n- `CHAR(n)`: A fixed-length string.\n- `VARCHAR(n)`: A variable-length string.\n- `TEXT`: For long-form text strings.\n\n3. Date and Time Data Types:\n- `DATE`: Stores date values (YYYY-MM-DD).\n- `DATETIME` or `TIMESTAMP`: Stores both date and time.",
    "syntax": "CREATE TABLE table_name (\n    column1 datatype [constraints],\n    column2 datatype [constraints],\n    ...\n);",
    "sqlQuery": "CREATE TABLE Student (\n  ID INT,\n  Name VARCHAR(50),\n  BirthDate DATE,\n  Marks DECIMAL(5,2),\n  IsPassed BOOLEAN\n);",
    "queryResult": "Table 'Student' created with columns for ID, Name, BirthDate, Marks, and IsPassed.",
    "queryExplanation": "This query creates a table with various data types: INT for ID, VARCHAR for Name, DATE for BirthDate, DECIMAL for Marks, and BOOLEAN for pass/fail status."
  },
  {
    "id": 3,
    "title": "MySQL Data Types",
    "image": "https://i.imgur.com/v1S6SjC.png",
    "content": "MySQL supports various data types categorized as Numeric, String, and Date & Time.\n\n- Numeric: TINYINT, INT, BIGINT for integers; DECIMAL for exact financial data.\n-  String: CHAR for fixed-length text, VARCHAR for variable-length, TEXT for long articles, and  ENUM for predefined lists.\n- Date/Time: DATE, DATETIME, TIMESTAMP (auto-updates on modification).\n- Other: BOOLEAN (alias for TINYINT(1)) and BLOB for binary data like images.",
    "syntax": "CREATE TABLE table_name (\n    column1 mysql_datatype,\n    ...\n);",
    "sqlQuery": "CREATE TABLE Orders (\n  OrderID INT,\n  OrderDate DATETIME,\n  Status ENUM('Pending', 'Shipped', 'Delivered'),\n  Receipt BLOB\n);",
    "queryResult": "Creates an Orders table with MySQL-specific data types including ENUM and BLOB.",
    "queryExplanation": "The ENUM data type restricts the 'Status' column to one of three specific options, ensuring data integrity."
  },
  {
    "id": 4,
    "title": "PostgreSQL Data Types",
    "image": "https://i.imgur.com/GscX8p3.png",
    "content": "PostgreSQL is known for its rich, standards-compliant set of data types and strong support for custom types.\n\n- Differentiators: TEXT has no length limit, SERIAL creates auto-incrementing keys, and ARRAY types like TEXT[] can store lists.\n- Advanced Types: JSONB for binary-optimized JSON storage and querying, and UUID for universally unique identifiers.",
    "syntax": "CREATE TABLE table_name (\n    column1 postgres_datatype,\n    ...\n);",
    "sqlQuery": "CREATE TABLE Employee (\n  ID SERIAL PRIMARY KEY,\n  Name VARCHAR(100),\n  Skills TEXT[],\n  Profile JSONB,\n  IsActive BOOLEAN\n);",
    "queryResult": "Creates Employee table using PostgreSQL-specific types like SERIAL, ARRAY, and JSONB.",
    "queryExplanation": " SERIAL automatically creates a unique ID for each new employee. TEXT[] stores a list of skills, and JSONB allows storing and querying structured data within a single field."
  },
  {
    "id": 5,
    "title": "Oracle SQL Data Types",
    "image": "https://i.imgur.com/b2r98C4.png",
    "content": "Oracle provides robust data types for large-scale enterprise applications.\n\n- Numeric : NUMBER(p,s) is the versatile, all-purpose numeric type.\n- String: VARCHAR2(n) is the standard for variable-length strings. CLOB is used for very large text data.\n- Date/Time: The DATE type in Oracle uniquely stores both date and time. TIMESTAMP provides higher precision.\n- Boolean: Oracle has no built-in BOOLEAN. It's simulated using NUMBER(1) (0/1) or CHAR(1) ('Y'/'N') with a CHECK constraint.",
    "syntax": "CREATE TABLE table_name (\n    column1 oracle_datatype,\n    ...\n);",
    "sqlQuery": "CREATE TABLE Product (\n  ProductID NUMBER PRIMARY KEY,\n  Name VARCHAR2(100),\n  Description CLOB,\n  IsAvailable CHAR(1) CHECK (IsAvailable IN ('Y','N'))\n);",
    "queryResult": "Creates Product table with Oracle-specific types like CLOB and CHAR(1) used for BOOLEAN logic.",
    "queryExplanation": "VARCHAR2 is the standard string type, and a CHECK constraint on a CHAR(1) column is the standard Oracle pattern for simulating a boolean value."
  },
  {
    "id": 6,
    "title": "SQL Constraints",
    "image": "https://i.imgur.com/1o9sOQf.png",
    "content": "SQL constraints are rules enforced on columns to maintain data accuracy, integrity, and reliability.\n\n1. NOT NULL: Ensures a column cannot have a NULL value.\n2. UNIQUE: Ensures all values in a column are different.\n3. PRIMARY KEY: Uniquely identifies each record in a table. It's a combination of NOT NULL and UNIQUE.\n4. FOREIGN KEY: Links two tables together, ensuring referential integrity.\n5. CHECK: Ensures the values in a column satisfy a specific condition.\n6. DEFAULT: Sets a default value for a column if no value is specified.",
    "syntax": "CREATE TABLE table_name (\n  column_name datatype CONSTRAINT_TYPE,\n  ...\n);",
    "sqlQuery": "CREATE TABLE Students (\n  StudentID INT PRIMARY KEY,\n  Name VARCHAR(100) NOT NULL,\n  Email VARCHAR(100) UNIQUE,\n  Age INT CHECK (Age >= 18),\n  Country VARCHAR(50) DEFAULT 'India'\n);",
    "queryResult": "Creates a Students table with multiple constraints.",
    "queryExplanation": "- PRIMARY KEY ensures StudentID is unique and not null.\n-  NOT NULL ensures Name cannot be empty.\n-  UNIQUE ensures each Email is different.\n-  CHECK ensures Age is 18 or more.\n-  DEFAULT sets 'India' as the country if one isn't provided."
  },
  {
  "id": 3,
  "title": "Overview of SQL Statements",
  "image": "https://i.postimg.cc/3Nb7RY7m/hierarchy.png",
  "content": "SQL (Structured Query Language) consists of several types of statements that allow you to interact with relational databases. These statements can be categorized into five main groups:\n\n1. Data Query Language (DQL): Used to retrieve data from databases\n2. Data Manipulation Language (DML): Used to manage data within tables\n3. Data Definition Language (DDL): Used to define and modify database structures\n4. Data Control Language (DCL): Used to control access to data\n5. Transaction Control Language (TCL): Used to manage transactions\n\nEach category serves a specific purpose in database operations and management.",
  "syntax": "-- SQL Statement Syntax\nSTATEMENT_TYPE [parameters];\n\n-- Examples:\nSELECT column1, column2 FROM table_name;\nINSERT INTO table_name (col1, col2) VALUES (val1, val2);\nUPDATE table_name SET col1 = val1 WHERE condition;\nDELETE FROM table_name WHERE condition;\nCREATE TABLE table_name (...);\nALTER TABLE table_name ADD COLUMN new_col INT;\nDROP TABLE table_name;\nGRANT privilege ON object TO user;\nREVOKE privilege ON object FROM user;\nCOMMIT;\nROLLBACK;",
  "sqlQuery": "-- Example of different SQL statement types\n\n-- DDL: Create a table\nCREATE TABLE departments (\n  dept_id INT PRIMARY KEY,\n  dept_name VARCHAR(50) NOT NULL\n);\n\n-- DML: Insert data\nINSERT INTO departments (dept_id, dept_name) \nVALUES (1, 'Human Resources'), (2, 'Finance'), (3, 'IT');\n\n-- DQL: Retrieve data\nSELECT * FROM departments;\n\n-- DML: Update data\nUPDATE departments \nSET dept_name = 'Information Technology' \nWHERE dept_id = 3;\n\n-- DCL: Grant permission\nGRANT SELECT ON departments TO user_account;\n\n-- TCL: Commit transaction\nCOMMIT;",
  "queryResult": "dept_id | dept_name\n--------|----------------------\n1       | Human Resources\n2       | Finance\n3       | Information Technology",
  "queryExplanation": "This example demonstrates the main categories of SQL statements:\n\n1. DDL (Data Definition Language):\n   - CREATE TABLE: Defines a new table structure with columns and constraints\n\n2. DML (Data Manipulation Language):\n   - INSERT: Adds new rows to a table\n   - UPDATE: Modifies existing data in a table\n   - SELECT: Retrieves data from database (also considered DQL)\n\n3. DCL (Data Control Language):\n   - GRANT: Gives specific privileges to users or roles\n\n4. TCL (Transaction Control Language):\n   - COMMIT: Saves all changes made in the current transaction\n\nSQL statements work together to perform complete database operations. DDL statements define the structure, DML statements manage the data, DCL statements control access, and TCL statements ensure data integrity during transactions."
}
]
